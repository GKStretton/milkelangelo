// Milkelangelo machine messages

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: machine.proto

package machinepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Node int32

const (
	Node_UNDEFINED Node = 0
	Node_HOME      Node = 4
	Node_HOME_TOP  Node = 8
	// Above and inside test tube positions
	// Note; INSIDE positions are valid for a range of z values, determined outside Navigation.
	Node_VIAL_1_ABOVE    Node = 10
	Node_MIN_VIAL_ABOVE  Node = 10
	Node_VIAL_1_INSIDE   Node = 15
	Node_MIN_VIAL_INSIDE Node = 15
	Node_VIAL_2_ABOVE    Node = 20
	Node_VIAL_2_INSIDE   Node = 25
	Node_VIAL_3_ABOVE    Node = 30
	Node_VIAL_3_INSIDE   Node = 35
	Node_VIAL_4_ABOVE    Node = 40
	Node_VIAL_4_INSIDE   Node = 45
	Node_VIAL_5_ABOVE    Node = 50
	Node_VIAL_5_INSIDE   Node = 55
	Node_VIAL_6_ABOVE    Node = 60
	Node_VIAL_6_INSIDE   Node = 65
	Node_VIAL_7_ABOVE    Node = 70
	Node_MAX_VIAL_ABOVE  Node = 70
	Node_VIAL_7_INSIDE   Node = 75
	Node_MAX_VIAL_INSIDE Node = 75
	// The node to enter the lower (vial) regions at
	Node_LOW_ENTRY_POINT Node = 30
	// High z but otherwise aligned for rinse container
	Node_RINSE_CONTAINER_ENTRY Node = 80
	// Low z and aligned for rinse container (in water)
	Node_RINSE_CONTAINER_LOW         Node = 85
	Node_OUTER_HANDOVER              Node = 90
	Node_INNER_HANDOVER              Node = 110
	Node_INVERSE_KINEMATICS_POSITION Node = 150
	Node_IDLE_LOCATION               Node = 80
)

// Enum value maps for Node.
var (
	Node_name = map[int32]string{
		0:  "UNDEFINED",
		4:  "HOME",
		8:  "HOME_TOP",
		10: "VIAL_1_ABOVE",
		// Duplicate value: 10: "MIN_VIAL_ABOVE",
		15: "VIAL_1_INSIDE",
		// Duplicate value: 15: "MIN_VIAL_INSIDE",
		20: "VIAL_2_ABOVE",
		25: "VIAL_2_INSIDE",
		30: "VIAL_3_ABOVE",
		35: "VIAL_3_INSIDE",
		40: "VIAL_4_ABOVE",
		45: "VIAL_4_INSIDE",
		50: "VIAL_5_ABOVE",
		55: "VIAL_5_INSIDE",
		60: "VIAL_6_ABOVE",
		65: "VIAL_6_INSIDE",
		70: "VIAL_7_ABOVE",
		// Duplicate value: 70: "MAX_VIAL_ABOVE",
		75: "VIAL_7_INSIDE",
		// Duplicate value: 75: "MAX_VIAL_INSIDE",
		// Duplicate value: 30: "LOW_ENTRY_POINT",
		80:  "RINSE_CONTAINER_ENTRY",
		85:  "RINSE_CONTAINER_LOW",
		90:  "OUTER_HANDOVER",
		110: "INNER_HANDOVER",
		150: "INVERSE_KINEMATICS_POSITION",
		// Duplicate value: 80: "IDLE_LOCATION",
	}
	Node_value = map[string]int32{
		"UNDEFINED":                   0,
		"HOME":                        4,
		"HOME_TOP":                    8,
		"VIAL_1_ABOVE":                10,
		"MIN_VIAL_ABOVE":              10,
		"VIAL_1_INSIDE":               15,
		"MIN_VIAL_INSIDE":             15,
		"VIAL_2_ABOVE":                20,
		"VIAL_2_INSIDE":               25,
		"VIAL_3_ABOVE":                30,
		"VIAL_3_INSIDE":               35,
		"VIAL_4_ABOVE":                40,
		"VIAL_4_INSIDE":               45,
		"VIAL_5_ABOVE":                50,
		"VIAL_5_INSIDE":               55,
		"VIAL_6_ABOVE":                60,
		"VIAL_6_INSIDE":               65,
		"VIAL_7_ABOVE":                70,
		"MAX_VIAL_ABOVE":              70,
		"VIAL_7_INSIDE":               75,
		"MAX_VIAL_INSIDE":             75,
		"LOW_ENTRY_POINT":             30,
		"RINSE_CONTAINER_ENTRY":       80,
		"RINSE_CONTAINER_LOW":         85,
		"OUTER_HANDOVER":              90,
		"INNER_HANDOVER":              110,
		"INVERSE_KINEMATICS_POSITION": 150,
		"IDLE_LOCATION":               80,
	}
)

func (x Node) Enum() *Node {
	p := new(Node)
	*p = x
	return p
}

func (x Node) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Node) Descriptor() protoreflect.EnumDescriptor {
	return file_machine_proto_enumTypes[0].Descriptor()
}

func (Node) Type() protoreflect.EnumType {
	return &file_machine_proto_enumTypes[0]
}

func (x Node) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Node.Descriptor instead.
func (Node) EnumDescriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{0}
}

// used in requests
type SolenoidValve int32

const (
	SolenoidValve_VALVE_UNDEFINED SolenoidValve = 0
	SolenoidValve_VALVE_DRAIN     SolenoidValve = 1
	SolenoidValve_VALVE_WATER     SolenoidValve = 2
	SolenoidValve_VALVE_MILK      SolenoidValve = 3
	SolenoidValve_VALVE_AIR       SolenoidValve = 4
)

// Enum value maps for SolenoidValve.
var (
	SolenoidValve_name = map[int32]string{
		0: "VALVE_UNDEFINED",
		1: "VALVE_DRAIN",
		2: "VALVE_WATER",
		3: "VALVE_MILK",
		4: "VALVE_AIR",
	}
	SolenoidValve_value = map[string]int32{
		"VALVE_UNDEFINED": 0,
		"VALVE_DRAIN":     1,
		"VALVE_WATER":     2,
		"VALVE_MILK":      3,
		"VALVE_AIR":       4,
	}
)

func (x SolenoidValve) Enum() *SolenoidValve {
	p := new(SolenoidValve)
	*p = x
	return p
}

func (x SolenoidValve) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SolenoidValve) Descriptor() protoreflect.EnumDescriptor {
	return file_machine_proto_enumTypes[1].Descriptor()
}

func (SolenoidValve) Type() protoreflect.EnumType {
	return &file_machine_proto_enumTypes[1]
}

func (x SolenoidValve) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SolenoidValve.Descriptor instead.
func (SolenoidValve) EnumDescriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{1}
}

type Mode int32

const (
	Mode_UNDEFINED_MODE Mode = 0
	Mode_MANUAL         Mode = 1
	Mode_AUTONOMOUS     Mode = 2
)

// Enum value maps for Mode.
var (
	Mode_name = map[int32]string{
		0: "UNDEFINED_MODE",
		1: "MANUAL",
		2: "AUTONOMOUS",
	}
	Mode_value = map[string]int32{
		"UNDEFINED_MODE": 0,
		"MANUAL":         1,
		"AUTONOMOUS":     2,
	}
)

func (x Mode) Enum() *Mode {
	p := new(Mode)
	*p = x
	return p
}

func (x Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_machine_proto_enumTypes[2].Descriptor()
}

func (Mode) Type() protoreflect.EnumType {
	return &file_machine_proto_enumTypes[2]
}

func (x Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mode.Descriptor instead.
func (Mode) EnumDescriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{2}
}

type Status int32

const (
	Status_UNDEFINED_STATUS     Status = 0
	Status_ERROR                Status = 1
	Status_E_STOP_ACTIVE        Status = 5
	Status_SLEEPING             Status = 6
	Status_SHUTTING_DOWN        Status = 9
	Status_WAKING_UP            Status = 10
	Status_CALIBRATING          Status = 20
	Status_IDLE_STATIONARY      Status = 30
	Status_IDLE_MOVING          Status = 31
	Status_RINSING_PIPETTE      Status = 40
	Status_DISPENSING           Status = 50
	Status_WAITING_FOR_DISPENSE Status = 55
	Status_COLLECTING           Status = 60
	Status_NAVIGATING_IK        Status = 70
	Status_NAVIGATING_OUTER     Status = 75
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0:  "UNDEFINED_STATUS",
		1:  "ERROR",
		5:  "E_STOP_ACTIVE",
		6:  "SLEEPING",
		9:  "SHUTTING_DOWN",
		10: "WAKING_UP",
		20: "CALIBRATING",
		30: "IDLE_STATIONARY",
		31: "IDLE_MOVING",
		40: "RINSING_PIPETTE",
		50: "DISPENSING",
		55: "WAITING_FOR_DISPENSE",
		60: "COLLECTING",
		70: "NAVIGATING_IK",
		75: "NAVIGATING_OUTER",
	}
	Status_value = map[string]int32{
		"UNDEFINED_STATUS":     0,
		"ERROR":                1,
		"E_STOP_ACTIVE":        5,
		"SLEEPING":             6,
		"SHUTTING_DOWN":        9,
		"WAKING_UP":            10,
		"CALIBRATING":          20,
		"IDLE_STATIONARY":      30,
		"IDLE_MOVING":          31,
		"RINSING_PIPETTE":      40,
		"DISPENSING":           50,
		"WAITING_FOR_DISPENSE": 55,
		"COLLECTING":           60,
		"NAVIGATING_IK":        70,
		"NAVIGATING_OUTER":     75,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_machine_proto_enumTypes[3].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_machine_proto_enumTypes[3]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{3}
}

type RinseStatus int32

const (
	RinseStatus_RINSE_UNDEFINED RinseStatus = 0
	RinseStatus_RINSE_COMPLETE  RinseStatus = 1
	RinseStatus_RINSE_REQUESTED RinseStatus = 2
	RinseStatus_RINSE_EXPELLING RinseStatus = 3
)

// Enum value maps for RinseStatus.
var (
	RinseStatus_name = map[int32]string{
		0: "RINSE_UNDEFINED",
		1: "RINSE_COMPLETE",
		2: "RINSE_REQUESTED",
		3: "RINSE_EXPELLING",
	}
	RinseStatus_value = map[string]int32{
		"RINSE_UNDEFINED": 0,
		"RINSE_COMPLETE":  1,
		"RINSE_REQUESTED": 2,
		"RINSE_EXPELLING": 3,
	}
)

func (x RinseStatus) Enum() *RinseStatus {
	p := new(RinseStatus)
	*p = x
	return p
}

func (x RinseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RinseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_machine_proto_enumTypes[4].Descriptor()
}

func (RinseStatus) Type() protoreflect.EnumType {
	return &file_machine_proto_enumTypes[4]
}

func (x RinseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RinseStatus.Descriptor instead.
func (RinseStatus) EnumDescriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{4}
}

type FluidType int32

const (
	FluidType_FLUID_UNDEFINED FluidType = 0
	FluidType_FLUID_DRAIN     FluidType = 1
	FluidType_FLUID_WATER     FluidType = 2
	FluidType_FLUID_MILK      FluidType = 3
)

// Enum value maps for FluidType.
var (
	FluidType_name = map[int32]string{
		0: "FLUID_UNDEFINED",
		1: "FLUID_DRAIN",
		2: "FLUID_WATER",
		3: "FLUID_MILK",
	}
	FluidType_value = map[string]int32{
		"FLUID_UNDEFINED": 0,
		"FLUID_DRAIN":     1,
		"FLUID_WATER":     2,
		"FLUID_MILK":      3,
	}
)

func (x FluidType) Enum() *FluidType {
	p := new(FluidType)
	*p = x
	return p
}

func (x FluidType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FluidType) Descriptor() protoreflect.EnumDescriptor {
	return file_machine_proto_enumTypes[5].Descriptor()
}

func (FluidType) Type() protoreflect.EnumType {
	return &file_machine_proto_enumTypes[5]
}

func (x FluidType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FluidType.Descriptor instead.
func (FluidType) EnumDescriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{5}
}

type ContentType int32

const (
	ContentType_CONTENT_TYPE_UNDEFINED ContentType = 0
	ContentType_CONTENT_TYPE_LONGFORM  ContentType = 1
	ContentType_CONTENT_TYPE_SHORTFORM ContentType = 2
	ContentType_CONTENT_TYPE_CLEANING  ContentType = 3
	ContentType_CONTENT_TYPE_DSLR      ContentType = 4
	ContentType_CONTENT_TYPE_STILL     ContentType = 5
)

// Enum value maps for ContentType.
var (
	ContentType_name = map[int32]string{
		0: "CONTENT_TYPE_UNDEFINED",
		1: "CONTENT_TYPE_LONGFORM",
		2: "CONTENT_TYPE_SHORTFORM",
		3: "CONTENT_TYPE_CLEANING",
		4: "CONTENT_TYPE_DSLR",
		5: "CONTENT_TYPE_STILL",
	}
	ContentType_value = map[string]int32{
		"CONTENT_TYPE_UNDEFINED": 0,
		"CONTENT_TYPE_LONGFORM":  1,
		"CONTENT_TYPE_SHORTFORM": 2,
		"CONTENT_TYPE_CLEANING":  3,
		"CONTENT_TYPE_DSLR":      4,
		"CONTENT_TYPE_STILL":     5,
	}
)

func (x ContentType) Enum() *ContentType {
	p := new(ContentType)
	*p = x
	return p
}

func (x ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_machine_proto_enumTypes[6].Descriptor()
}

func (ContentType) Type() protoreflect.EnumType {
	return &file_machine_proto_enumTypes[6]
}

func (x ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentType.Descriptor instead.
func (ContentType) EnumDescriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{6}
}

type SocialPlatform int32

const (
	SocialPlatform_SOCIAL_PLATFORM_UNDEFINED SocialPlatform = 0
	SocialPlatform_SOCIAL_PLATFORM_YOUTUBE   SocialPlatform = 1
	SocialPlatform_SOCIAL_PLATFORM_TIKTOK    SocialPlatform = 2
	SocialPlatform_SOCIAL_PLATFORM_INSTAGRAM SocialPlatform = 3
	SocialPlatform_SOCIAL_PLATFORM_FACEBOOK  SocialPlatform = 4
	SocialPlatform_SOCIAL_PLATFORM_TWITTER   SocialPlatform = 5
	SocialPlatform_SOCIAL_PLATFORM_REDDIT    SocialPlatform = 6
)

// Enum value maps for SocialPlatform.
var (
	SocialPlatform_name = map[int32]string{
		0: "SOCIAL_PLATFORM_UNDEFINED",
		1: "SOCIAL_PLATFORM_YOUTUBE",
		2: "SOCIAL_PLATFORM_TIKTOK",
		3: "SOCIAL_PLATFORM_INSTAGRAM",
		4: "SOCIAL_PLATFORM_FACEBOOK",
		5: "SOCIAL_PLATFORM_TWITTER",
		6: "SOCIAL_PLATFORM_REDDIT",
	}
	SocialPlatform_value = map[string]int32{
		"SOCIAL_PLATFORM_UNDEFINED": 0,
		"SOCIAL_PLATFORM_YOUTUBE":   1,
		"SOCIAL_PLATFORM_TIKTOK":    2,
		"SOCIAL_PLATFORM_INSTAGRAM": 3,
		"SOCIAL_PLATFORM_FACEBOOK":  4,
		"SOCIAL_PLATFORM_TWITTER":   5,
		"SOCIAL_PLATFORM_REDDIT":    6,
	}
)

func (x SocialPlatform) Enum() *SocialPlatform {
	p := new(SocialPlatform)
	*p = x
	return p
}

func (x SocialPlatform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SocialPlatform) Descriptor() protoreflect.EnumDescriptor {
	return file_machine_proto_enumTypes[7].Descriptor()
}

func (SocialPlatform) Type() protoreflect.EnumType {
	return &file_machine_proto_enumTypes[7]
}

func (x SocialPlatform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SocialPlatform.Descriptor instead.
func (SocialPlatform) EnumDescriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{7}
}

type EmailRecipient int32

const (
	EmailRecipient_EMAIL_RECIPIENT_UNDEFINED            EmailRecipient = 0
	EmailRecipient_EMAIL_RECIPIENT_MAINTENANCE          EmailRecipient = 1
	EmailRecipient_EMAIL_RECIPIENT_ROUTINE_OPERATIONS   EmailRecipient = 2
	EmailRecipient_EMAIL_RECIPIENT_SOCIAL_NOTIFICATIONS EmailRecipient = 3
)

// Enum value maps for EmailRecipient.
var (
	EmailRecipient_name = map[int32]string{
		0: "EMAIL_RECIPIENT_UNDEFINED",
		1: "EMAIL_RECIPIENT_MAINTENANCE",
		2: "EMAIL_RECIPIENT_ROUTINE_OPERATIONS",
		3: "EMAIL_RECIPIENT_SOCIAL_NOTIFICATIONS",
	}
	EmailRecipient_value = map[string]int32{
		"EMAIL_RECIPIENT_UNDEFINED":            0,
		"EMAIL_RECIPIENT_MAINTENANCE":          1,
		"EMAIL_RECIPIENT_ROUTINE_OPERATIONS":   2,
		"EMAIL_RECIPIENT_SOCIAL_NOTIFICATIONS": 3,
	}
)

func (x EmailRecipient) Enum() *EmailRecipient {
	p := new(EmailRecipient)
	*p = x
	return p
}

func (x EmailRecipient) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmailRecipient) Descriptor() protoreflect.EnumDescriptor {
	return file_machine_proto_enumTypes[8].Descriptor()
}

func (EmailRecipient) Type() protoreflect.EnumType {
	return &file_machine_proto_enumTypes[8]
}

func (x EmailRecipient) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmailRecipient.Descriptor instead.
func (EmailRecipient) EnumDescriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{8}
}

type VialProfile_VialFluid int32

const (
	VialProfile_VIAL_FLUID_UNDEFINED       VialProfile_VialFluid = 0
	VialProfile_VIAL_FLUID_DYE_WATER_BASED VialProfile_VialFluid = 1
	VialProfile_VIAL_FLUID_EMULSIFIER      VialProfile_VialFluid = 2
	VialProfile_VIAL_FLUID_AIR             VialProfile_VialFluid = 3
	VialProfile_VIAL_FLUID_SOLVENT         VialProfile_VialFluid = 4
)

// Enum value maps for VialProfile_VialFluid.
var (
	VialProfile_VialFluid_name = map[int32]string{
		0: "VIAL_FLUID_UNDEFINED",
		1: "VIAL_FLUID_DYE_WATER_BASED",
		2: "VIAL_FLUID_EMULSIFIER",
		3: "VIAL_FLUID_AIR",
		4: "VIAL_FLUID_SOLVENT",
	}
	VialProfile_VialFluid_value = map[string]int32{
		"VIAL_FLUID_UNDEFINED":       0,
		"VIAL_FLUID_DYE_WATER_BASED": 1,
		"VIAL_FLUID_EMULSIFIER":      2,
		"VIAL_FLUID_AIR":             3,
		"VIAL_FLUID_SOLVENT":         4,
	}
)

func (x VialProfile_VialFluid) Enum() *VialProfile_VialFluid {
	p := new(VialProfile_VialFluid)
	*p = x
	return p
}

func (x VialProfile_VialFluid) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VialProfile_VialFluid) Descriptor() protoreflect.EnumDescriptor {
	return file_machine_proto_enumTypes[9].Descriptor()
}

func (VialProfile_VialFluid) Type() protoreflect.EnumType {
	return &file_machine_proto_enumTypes[9]
}

func (x VialProfile_VialFluid) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VialProfile_VialFluid.Descriptor instead.
func (VialProfile_VialFluid) EnumDescriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{15, 0}
}

type PipetteState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spent          bool    `protobuf:"varint,1,opt,name=spent,proto3" json:"spent,omitempty"`
	VialHeld       uint32  `protobuf:"varint,2,opt,name=vial_held,json=vialHeld,proto3" json:"vial_held,omitempty"`
	VolumeTargetUl float32 `protobuf:"fixed32,3,opt,name=volume_target_ul,json=volumeTargetUl,proto3" json:"volume_target_ul,omitempty"`
	// incremented every time a dispense is requested
	DispenseRequestNumber uint32 `protobuf:"varint,4,opt,name=dispense_request_number,json=dispenseRequestNumber,proto3" json:"dispense_request_number,omitempty"`
}

func (x *PipetteState) Reset() {
	*x = PipetteState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipetteState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipetteState) ProtoMessage() {}

func (x *PipetteState) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipetteState.ProtoReflect.Descriptor instead.
func (*PipetteState) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{0}
}

func (x *PipetteState) GetSpent() bool {
	if x != nil {
		return x.Spent
	}
	return false
}

func (x *PipetteState) GetVialHeld() uint32 {
	if x != nil {
		return x.VialHeld
	}
	return 0
}

func (x *PipetteState) GetVolumeTargetUl() float32 {
	if x != nil {
		return x.VolumeTargetUl
	}
	return 0
}

func (x *PipetteState) GetDispenseRequestNumber() uint32 {
	if x != nil {
		return x.DispenseRequestNumber
	}
	return 0
}

type CollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Completed     bool    `protobuf:"varint,1,opt,name=completed,proto3" json:"completed,omitempty"`
	RequestNumber uint64  `protobuf:"varint,2,opt,name=request_number,json=requestNumber,proto3" json:"request_number,omitempty"`
	VialNumber    uint64  `protobuf:"varint,3,opt,name=vial_number,json=vialNumber,proto3" json:"vial_number,omitempty"`
	VolumeUl      float32 `protobuf:"fixed32,4,opt,name=volume_ul,json=volumeUl,proto3" json:"volume_ul,omitempty"`
}

func (x *CollectionRequest) Reset() {
	*x = CollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionRequest) ProtoMessage() {}

func (x *CollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionRequest.ProtoReflect.Descriptor instead.
func (*CollectionRequest) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{1}
}

func (x *CollectionRequest) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

func (x *CollectionRequest) GetRequestNumber() uint64 {
	if x != nil {
		return x.RequestNumber
	}
	return 0
}

func (x *CollectionRequest) GetVialNumber() uint64 {
	if x != nil {
		return x.VialNumber
	}
	return 0
}

func (x *CollectionRequest) GetVolumeUl() float32 {
	if x != nil {
		return x.VolumeUl
	}
	return 0
}

type MovementDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ik target from -1 to 1
	TargetXUnit float32 `protobuf:"fixed32,1,opt,name=target_x_unit,json=targetXUnit,proto3" json:"target_x_unit,omitempty"`
	// ik target from -1 to 1
	TargetYUnit float32 `protobuf:"fixed32,2,opt,name=target_y_unit,json=targetYUnit,proto3" json:"target_y_unit,omitempty"`
	// ik z target in mm
	TargetZIk float32 `protobuf:"fixed32,5,opt,name=target_z_ik,json=targetZIk,proto3" json:"target_z_ik,omitempty"`
	// fk target in degrees
	TargetRingDeg float32 `protobuf:"fixed32,10,opt,name=target_ring_deg,json=targetRingDeg,proto3" json:"target_ring_deg,omitempty"`
	// fk target in degrees
	TargetYawDeg float32 `protobuf:"fixed32,11,opt,name=target_yaw_deg,json=targetYawDeg,proto3" json:"target_yaw_deg,omitempty"`
}

func (x *MovementDetails) Reset() {
	*x = MovementDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovementDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovementDetails) ProtoMessage() {}

func (x *MovementDetails) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovementDetails.ProtoReflect.Descriptor instead.
func (*MovementDetails) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{2}
}

func (x *MovementDetails) GetTargetXUnit() float32 {
	if x != nil {
		return x.TargetXUnit
	}
	return 0
}

func (x *MovementDetails) GetTargetYUnit() float32 {
	if x != nil {
		return x.TargetYUnit
	}
	return 0
}

func (x *MovementDetails) GetTargetZIk() float32 {
	if x != nil {
		return x.TargetZIk
	}
	return 0
}

func (x *MovementDetails) GetTargetRingDeg() float32 {
	if x != nil {
		return x.TargetRingDeg
	}
	return 0
}

func (x *MovementDetails) GetTargetYawDeg() float32 {
	if x != nil {
		return x.TargetYawDeg
	}
	return 0
}

type FluidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FluidType FluidType `protobuf:"varint,1,opt,name=fluidType,proto3,enum=machine.FluidType" json:"fluidType,omitempty"`
	VolumeMl  float32   `protobuf:"fixed32,2,opt,name=volume_ml,json=volumeMl,proto3" json:"volume_ml,omitempty"`
	Complete  bool      `protobuf:"varint,3,opt,name=complete,proto3" json:"complete,omitempty"`
	// if true, open drain while request is taking place
	// (e.g. for rinsing with water)
	OpenDrain bool `protobuf:"varint,4,opt,name=open_drain,json=openDrain,proto3" json:"open_drain,omitempty"`
}

func (x *FluidRequest) Reset() {
	*x = FluidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FluidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FluidRequest) ProtoMessage() {}

func (x *FluidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FluidRequest.ProtoReflect.Descriptor instead.
func (*FluidRequest) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{3}
}

func (x *FluidRequest) GetFluidType() FluidType {
	if x != nil {
		return x.FluidType
	}
	return FluidType_FLUID_UNDEFINED
}

func (x *FluidRequest) GetVolumeMl() float32 {
	if x != nil {
		return x.VolumeMl
	}
	return 0
}

func (x *FluidRequest) GetComplete() bool {
	if x != nil {
		return x.Complete
	}
	return false
}

func (x *FluidRequest) GetOpenDrain() bool {
	if x != nil {
		return x.OpenDrain
	}
	return false
}

type FluidDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BowlFluidLevelMl float32 `protobuf:"fixed32,1,opt,name=bowl_fluid_level_ml,json=bowlFluidLevelMl,proto3" json:"bowl_fluid_level_ml,omitempty"`
}

func (x *FluidDetails) Reset() {
	*x = FluidDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FluidDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FluidDetails) ProtoMessage() {}

func (x *FluidDetails) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FluidDetails.ProtoReflect.Descriptor instead.
func (*FluidDetails) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{4}
}

func (x *FluidDetails) GetBowlFluidLevelMl() float32 {
	if x != nil {
		return x.BowlFluidLevelMl
	}
	return 0
}

type StateReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp in microseconds since unix epoch, UTC. Added
	// by gateway since firmware doesn't know real time.
	TimestampUnixMicros uint64 `protobuf:"varint,2,opt,name=timestamp_unix_micros,json=timestampUnixMicros,proto3" json:"timestamp_unix_micros,omitempty"`
	// incremented on startup, currently 1 byte
	StartupCounter uint64 `protobuf:"varint,3,opt,name=startup_counter,json=startupCounter,proto3" json:"startup_counter,omitempty"`
	Mode           Mode   `protobuf:"varint,4,opt,name=mode,proto3,enum=machine.Mode" json:"mode,omitempty"`
	Status         Status `protobuf:"varint,5,opt,name=status,proto3,enum=machine.Status" json:"status,omitempty"`
	// Useful for synchronisation with footage
	LightsOn          bool               `protobuf:"varint,6,opt,name=lights_on,json=lightsOn,proto3" json:"lights_on,omitempty"`
	PipetteState      *PipetteState      `protobuf:"bytes,10,opt,name=pipette_state,json=pipetteState,proto3" json:"pipette_state,omitempty"`
	CollectionRequest *CollectionRequest `protobuf:"bytes,11,opt,name=collection_request,json=collectionRequest,proto3" json:"collection_request,omitempty"`
	MovementDetails   *MovementDetails   `protobuf:"bytes,12,opt,name=movement_details,json=movementDetails,proto3" json:"movement_details,omitempty"`
	FluidRequest      *FluidRequest      `protobuf:"bytes,13,opt,name=fluid_request,json=fluidRequest,proto3" json:"fluid_request,omitempty"`
	FluidDetails      *FluidDetails      `protobuf:"bytes,14,opt,name=fluid_details,json=fluidDetails,proto3" json:"fluid_details,omitempty"`
	RinseStatus       RinseStatus        `protobuf:"varint,15,opt,name=rinse_status,json=rinseStatus,proto3,enum=machine.RinseStatus" json:"rinse_status,omitempty"`
	// the following are populated by the backend, useful in post-processing
	Paused            bool   `protobuf:"varint,50,opt,name=paused,proto3" json:"paused,omitempty"`
	TimestampReadable string `protobuf:"bytes,51,opt,name=timestamp_readable,json=timestampReadable,proto3" json:"timestamp_readable,omitempty"`
	// e.g. 1 for 0001.jpg
	LatestDslrFileNumber uint64 `protobuf:"varint,52,opt,name=latest_dslr_file_number,json=latestDslrFileNumber,proto3" json:"latest_dslr_file_number,omitempty"`
}

func (x *StateReport) Reset() {
	*x = StateReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateReport) ProtoMessage() {}

func (x *StateReport) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateReport.ProtoReflect.Descriptor instead.
func (*StateReport) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{5}
}

func (x *StateReport) GetTimestampUnixMicros() uint64 {
	if x != nil {
		return x.TimestampUnixMicros
	}
	return 0
}

func (x *StateReport) GetStartupCounter() uint64 {
	if x != nil {
		return x.StartupCounter
	}
	return 0
}

func (x *StateReport) GetMode() Mode {
	if x != nil {
		return x.Mode
	}
	return Mode_UNDEFINED_MODE
}

func (x *StateReport) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNDEFINED_STATUS
}

func (x *StateReport) GetLightsOn() bool {
	if x != nil {
		return x.LightsOn
	}
	return false
}

func (x *StateReport) GetPipetteState() *PipetteState {
	if x != nil {
		return x.PipetteState
	}
	return nil
}

func (x *StateReport) GetCollectionRequest() *CollectionRequest {
	if x != nil {
		return x.CollectionRequest
	}
	return nil
}

func (x *StateReport) GetMovementDetails() *MovementDetails {
	if x != nil {
		return x.MovementDetails
	}
	return nil
}

func (x *StateReport) GetFluidRequest() *FluidRequest {
	if x != nil {
		return x.FluidRequest
	}
	return nil
}

func (x *StateReport) GetFluidDetails() *FluidDetails {
	if x != nil {
		return x.FluidDetails
	}
	return nil
}

func (x *StateReport) GetRinseStatus() RinseStatus {
	if x != nil {
		return x.RinseStatus
	}
	return RinseStatus_RINSE_UNDEFINED
}

func (x *StateReport) GetPaused() bool {
	if x != nil {
		return x.Paused
	}
	return false
}

func (x *StateReport) GetTimestampReadable() string {
	if x != nil {
		return x.TimestampReadable
	}
	return ""
}

func (x *StateReport) GetLatestDslrFileNumber() uint64 {
	if x != nil {
		return x.LatestDslrFileNumber
	}
	return 0
}

type StateReportList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateReports []*StateReport `protobuf:"bytes,1,rep,name=StateReports,proto3" json:"StateReports,omitempty"`
}

func (x *StateReportList) Reset() {
	*x = StateReportList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateReportList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateReportList) ProtoMessage() {}

func (x *StateReportList) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateReportList.ProtoReflect.Descriptor instead.
func (*StateReportList) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{6}
}

func (x *StateReportList) GetStateReports() []*StateReport {
	if x != nil {
		return x.StateReports
	}
	return nil
}

type SessionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Paused       bool   `protobuf:"varint,2,opt,name=paused,proto3" json:"paused,omitempty"`
	Complete     bool   `protobuf:"varint,3,opt,name=complete,proto3" json:"complete,omitempty"`
	Production   bool   `protobuf:"varint,4,opt,name=production,proto3" json:"production,omitempty"`
	ProductionId uint64 `protobuf:"varint,5,opt,name=production_id,json=productionId,proto3" json:"production_id,omitempty"`
}

func (x *SessionStatus) Reset() {
	*x = SessionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionStatus) ProtoMessage() {}

func (x *SessionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionStatus.ProtoReflect.Descriptor instead.
func (*SessionStatus) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{7}
}

func (x *SessionStatus) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SessionStatus) GetPaused() bool {
	if x != nil {
		return x.Paused
	}
	return false
}

func (x *SessionStatus) GetComplete() bool {
	if x != nil {
		return x.Complete
	}
	return false
}

func (x *SessionStatus) GetProduction() bool {
	if x != nil {
		return x.Production
	}
	return false
}

func (x *SessionStatus) GetProductionId() uint64 {
	if x != nil {
		return x.ProductionId
	}
	return 0
}

type StreamStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Live bool `protobuf:"varint,1,opt,name=live,proto3" json:"live,omitempty"`
}

func (x *StreamStatus) Reset() {
	*x = StreamStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamStatus) ProtoMessage() {}

func (x *StreamStatus) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamStatus.ProtoReflect.Descriptor instead.
func (*StreamStatus) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{8}
}

func (x *StreamStatus) GetLive() bool {
	if x != nil {
		return x.Live
	}
	return false
}

type DispenseMetadataMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [startupCounter]_[dispenseRequestNumber]
	DispenseMetadata map[string]*DispenseMetadata `protobuf:"bytes,1,rep,name=dispense_metadata,json=dispenseMetadata,proto3" json:"dispense_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DispenseMetadataMap) Reset() {
	*x = DispenseMetadataMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispenseMetadataMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispenseMetadataMap) ProtoMessage() {}

func (x *DispenseMetadataMap) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispenseMetadataMap.ProtoReflect.Descriptor instead.
func (*DispenseMetadataMap) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{9}
}

func (x *DispenseMetadataMap) GetDispenseMetadata() map[string]*DispenseMetadata {
	if x != nil {
		return x.DispenseMetadata
	}
	return nil
}

type DispenseMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedDispense bool `protobuf:"varint,1,opt,name=failed_dispense,json=failedDispense,proto3" json:"failed_dispense,omitempty"`
	// how many ms later than expected the dispense happened
	DispenseDelayMs uint64 `protobuf:"varint,2,opt,name=dispense_delay_ms,json=dispenseDelayMs,proto3" json:"dispense_delay_ms,omitempty"`
	// if non-zero, override the vial profile's duration with this value.
	MinDurationOverrideMs uint64 `protobuf:"varint,3,opt,name=min_duration_override_ms,json=minDurationOverrideMs,proto3" json:"min_duration_override_ms,omitempty"`
	// if non-zero, override the vial profile's speed with this value.
	SpeedMultOverride uint64 `protobuf:"varint,4,opt,name=speed_mult_override,json=speedMultOverride,proto3" json:"speed_mult_override,omitempty"`
}

func (x *DispenseMetadata) Reset() {
	*x = DispenseMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispenseMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispenseMetadata) ProtoMessage() {}

func (x *DispenseMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispenseMetadata.ProtoReflect.Descriptor instead.
func (*DispenseMetadata) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{10}
}

func (x *DispenseMetadata) GetFailedDispense() bool {
	if x != nil {
		return x.FailedDispense
	}
	return false
}

func (x *DispenseMetadata) GetDispenseDelayMs() uint64 {
	if x != nil {
		return x.DispenseDelayMs
	}
	return 0
}

func (x *DispenseMetadata) GetMinDurationOverrideMs() uint64 {
	if x != nil {
		return x.MinDurationOverrideMs
	}
	return 0
}

func (x *DispenseMetadata) GetSpeedMultOverride() uint64 {
	if x != nil {
		return x.SpeedMultOverride
	}
	return 0
}

// statuses for all the content types for a specific session
type ContentTypeStatuses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// str(ContentType) -> ContentTypeStatus
	ContentStatuses map[string]*ContentTypeStatus `protobuf:"bytes,1,rep,name=content_statuses,json=contentStatuses,proto3" json:"content_statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// splashtext for this session
	Splashtext    string `protobuf:"bytes,2,opt,name=splashtext,proto3" json:"splashtext,omitempty"`
	SplashtextHue uint64 `protobuf:"varint,3,opt,name=splashtext_hue,json=splashtextHue,proto3" json:"splashtext_hue,omitempty"`
}

func (x *ContentTypeStatuses) Reset() {
	*x = ContentTypeStatuses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentTypeStatuses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentTypeStatuses) ProtoMessage() {}

func (x *ContentTypeStatuses) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentTypeStatuses.ProtoReflect.Descriptor instead.
func (*ContentTypeStatuses) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{11}
}

func (x *ContentTypeStatuses) GetContentStatuses() map[string]*ContentTypeStatus {
	if x != nil {
		return x.ContentStatuses
	}
	return nil
}

func (x *ContentTypeStatuses) GetSplashtext() string {
	if x != nil {
		return x.Splashtext
	}
	return ""
}

func (x *ContentTypeStatuses) GetSplashtextHue() uint64 {
	if x != nil {
		return x.SplashtextHue
	}
	return 0
}

type ContentTypeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawTitle       string  `protobuf:"bytes,1,opt,name=raw_title,json=rawTitle,proto3" json:"raw_title,omitempty"`
	RawDescription string  `protobuf:"bytes,2,opt,name=raw_description,json=rawDescription,proto3" json:"raw_description,omitempty"`
	Caption        string  `protobuf:"bytes,3,opt,name=caption,proto3" json:"caption,omitempty"`
	Posts          []*Post `protobuf:"bytes,5,rep,name=posts,proto3" json:"posts,omitempty"`
	MusicFile      string  `protobuf:"bytes,7,opt,name=music_file,json=musicFile,proto3" json:"music_file,omitempty"`
	MusicName      string  `protobuf:"bytes,8,opt,name=music_name,json=musicName,proto3" json:"music_name,omitempty"`
}

func (x *ContentTypeStatus) Reset() {
	*x = ContentTypeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentTypeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentTypeStatus) ProtoMessage() {}

func (x *ContentTypeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentTypeStatus.ProtoReflect.Descriptor instead.
func (*ContentTypeStatus) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{12}
}

func (x *ContentTypeStatus) GetRawTitle() string {
	if x != nil {
		return x.RawTitle
	}
	return ""
}

func (x *ContentTypeStatus) GetRawDescription() string {
	if x != nil {
		return x.RawDescription
	}
	return ""
}

func (x *ContentTypeStatus) GetCaption() string {
	if x != nil {
		return x.Caption
	}
	return ""
}

func (x *ContentTypeStatus) GetPosts() []*Post {
	if x != nil {
		return x.Posts
	}
	return nil
}

func (x *ContentTypeStatus) GetMusicFile() string {
	if x != nil {
		return x.MusicFile
	}
	return ""
}

func (x *ContentTypeStatus) GetMusicName() string {
	if x != nil {
		return x.MusicName
	}
	return ""
}

type Post struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform SocialPlatform `protobuf:"varint,1,opt,name=platform,proto3,enum=machine.SocialPlatform" json:"platform,omitempty"`
	// e.g. subreddit
	SubPlatform string `protobuf:"bytes,2,opt,name=sub_platform,json=subPlatform,proto3" json:"sub_platform,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Uploaded    bool   `protobuf:"varint,5,opt,name=uploaded,proto3" json:"uploaded,omitempty"`
	Url         string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	// if true and relevant, crosspost rather than reuploading, e.g. for reddit
	Crosspost bool `protobuf:"varint,7,opt,name=crosspost,proto3" json:"crosspost,omitempty"`
	// seconds ts of when to publish. If 0, publish immediately, because 0 is in the past.
	ScheduledUnixTimetamp uint64 `protobuf:"varint,8,opt,name=scheduled_unix_timetamp,json=scheduledUnixTimetamp,proto3" json:"scheduled_unix_timetamp,omitempty"`
	// if true, video will be posted unlisted, accessible by link only. Or not posted if the platform doesn't support it.
	Unlisted bool `protobuf:"varint,9,opt,name=unlisted,proto3" json:"unlisted,omitempty"`
}

func (x *Post) Reset() {
	*x = Post{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Post) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Post) ProtoMessage() {}

func (x *Post) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Post.ProtoReflect.Descriptor instead.
func (*Post) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{13}
}

func (x *Post) GetPlatform() SocialPlatform {
	if x != nil {
		return x.Platform
	}
	return SocialPlatform_SOCIAL_PLATFORM_UNDEFINED
}

func (x *Post) GetSubPlatform() string {
	if x != nil {
		return x.SubPlatform
	}
	return ""
}

func (x *Post) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Post) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Post) GetUploaded() bool {
	if x != nil {
		return x.Uploaded
	}
	return false
}

func (x *Post) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Post) GetCrosspost() bool {
	if x != nil {
		return x.Crosspost
	}
	return false
}

func (x *Post) GetScheduledUnixTimetamp() uint64 {
	if x != nil {
		return x.ScheduledUnixTimetamp
	}
	return 0
}

func (x *Post) GetUnlisted() bool {
	if x != nil {
		return x.Unlisted
	}
	return false
}

// emails used for administration, not intended for audience distribution
type Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject   string         `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Body      string         `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Recipient EmailRecipient `protobuf:"varint,3,opt,name=recipient,proto3,enum=machine.EmailRecipient" json:"recipient,omitempty"`
}

func (x *Email) Reset() {
	*x = Email{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Email) ProtoMessage() {}

func (x *Email) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Email.ProtoReflect.Descriptor instead.
func (*Email) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{14}
}

func (x *Email) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Email) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *Email) GetRecipient() EmailRecipient {
	if x != nil {
		return x.Recipient
	}
	return EmailRecipient_EMAIL_RECIPIENT_UNDEFINED
}

// This contains information about each vial/test tube.
//
// These should be maintained over time by the frontend interface and the backend
// in response to dispenses.
//
// The current value is copied into session files when a session starts if it's in
// the system.
type VialProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// incremental unique id for each vial in and out the system
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// this should have a complete description of the mixture, including base
	// fluids and the percentage makeup of each. This may be augmented by
	// quantised makeup data in future.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// the pipette slop, how much extra volume to move on the first dispense
	SlopUl float32 `protobuf:"fixed32,3,opt,name=slop_ul,json=slopUl,proto3" json:"slop_ul,omitempty"`
	// how much volume to dispense each time
	DispenseVolumeUl float32 `protobuf:"fixed32,4,opt,name=dispense_volume_ul,json=dispenseVolumeUl,proto3" json:"dispense_volume_ul,omitempty"`
	// how long after dispense to slow down the footage in the videos
	FootageDelayMs uint64 `protobuf:"varint,5,opt,name=footage_delay_ms,json=footageDelayMs,proto3" json:"footage_delay_ms,omitempty"`
	// how long to keep the footage slowed down in the videos
	FootageMinDurationMs uint64 `protobuf:"varint,6,opt,name=footage_min_duration_ms,json=footageMinDurationMs,proto3" json:"footage_min_duration_ms,omitempty"`
	// what speed to give the footage in the videos
	FootageSpeedMult float32 `protobuf:"fixed32,7,opt,name=footage_speed_mult,json=footageSpeedMult,proto3" json:"footage_speed_mult,omitempty"`
	// if true, footage of this profile will not be treated differently
	// to other footage (no slowdown etc.)
	FootageIgnore bool `protobuf:"varint,8,opt,name=footage_ignore,json=footageIgnore,proto3" json:"footage_ignore,omitempty"`
	// Volume when this was first put in vial
	InitialVolumeUl float32 `protobuf:"fixed32,9,opt,name=initial_volume_ul,json=initialVolumeUl,proto3" json:"initial_volume_ul,omitempty"`
	// Current volume. Note this will be just volume at start of session in
	// session files.
	CurrentVolumeUl float32 `protobuf:"fixed32,10,opt,name=current_volume_ul,json=currentVolumeUl,proto3" json:"current_volume_ul,omitempty"`
	// friendly name for use in interfaces
	Name      string                `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	VialFluid VialProfile_VialFluid `protobuf:"varint,12,opt,name=vial_fluid,json=vialFluid,proto3,enum=machine.VialProfile_VialFluid" json:"vial_fluid,omitempty"`
	// colour to represent this in interfaces, of the form '#aa22ff'
	Colour string `protobuf:"bytes,13,opt,name=colour,proto3" json:"colour,omitempty"`
	// alternate names that can be used in voting
	Aliases []string `protobuf:"bytes,14,rep,name=aliases,proto3" json:"aliases,omitempty"`
}

func (x *VialProfile) Reset() {
	*x = VialProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VialProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VialProfile) ProtoMessage() {}

func (x *VialProfile) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VialProfile.ProtoReflect.Descriptor instead.
func (*VialProfile) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{15}
}

func (x *VialProfile) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VialProfile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VialProfile) GetSlopUl() float32 {
	if x != nil {
		return x.SlopUl
	}
	return 0
}

func (x *VialProfile) GetDispenseVolumeUl() float32 {
	if x != nil {
		return x.DispenseVolumeUl
	}
	return 0
}

func (x *VialProfile) GetFootageDelayMs() uint64 {
	if x != nil {
		return x.FootageDelayMs
	}
	return 0
}

func (x *VialProfile) GetFootageMinDurationMs() uint64 {
	if x != nil {
		return x.FootageMinDurationMs
	}
	return 0
}

func (x *VialProfile) GetFootageSpeedMult() float32 {
	if x != nil {
		return x.FootageSpeedMult
	}
	return 0
}

func (x *VialProfile) GetFootageIgnore() bool {
	if x != nil {
		return x.FootageIgnore
	}
	return false
}

func (x *VialProfile) GetInitialVolumeUl() float32 {
	if x != nil {
		return x.InitialVolumeUl
	}
	return 0
}

func (x *VialProfile) GetCurrentVolumeUl() float32 {
	if x != nil {
		return x.CurrentVolumeUl
	}
	return 0
}

func (x *VialProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VialProfile) GetVialFluid() VialProfile_VialFluid {
	if x != nil {
		return x.VialFluid
	}
	return VialProfile_VIAL_FLUID_UNDEFINED
}

func (x *VialProfile) GetColour() string {
	if x != nil {
		return x.Colour
	}
	return ""
}

func (x *VialProfile) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

// contains a map of the current vial positions to vial profile ids
// vial position -> VialProfile id.
type SystemVialConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vials map[uint64]uint64 `protobuf:"bytes,1,rep,name=vials,proto3" json:"vials,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *SystemVialConfiguration) Reset() {
	*x = SystemVialConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemVialConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemVialConfiguration) ProtoMessage() {}

func (x *SystemVialConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemVialConfiguration.ProtoReflect.Descriptor instead.
func (*SystemVialConfiguration) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{16}
}

func (x *SystemVialConfiguration) GetVials() map[uint64]uint64 {
	if x != nil {
		return x.Vials
	}
	return nil
}

// this is for all the VialProfiles, mapped by id.
type VialProfileCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VialProfile ID -> VialProfile
	Profiles map[uint64]*VialProfile `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VialProfileCollection) Reset() {
	*x = VialProfileCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VialProfileCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VialProfileCollection) ProtoMessage() {}

func (x *VialProfileCollection) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VialProfileCollection.ProtoReflect.Descriptor instead.
func (*VialProfileCollection) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{17}
}

func (x *VialProfileCollection) GetProfiles() map[uint64]*VialProfile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

// contains a static snapshot of the VialProfiles for each system position
type SystemVialConfigurationSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profiles map[uint64]*VialProfile `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SystemVialConfigurationSnapshot) Reset() {
	*x = SystemVialConfigurationSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemVialConfigurationSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemVialConfigurationSnapshot) ProtoMessage() {}

func (x *SystemVialConfigurationSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemVialConfigurationSnapshot.ProtoReflect.Descriptor instead.
func (*SystemVialConfigurationSnapshot) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{18}
}

func (x *SystemVialConfigurationSnapshot) GetProfiles() map[uint64]*VialProfile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

var File_machine_proto protoreflect.FileDescriptor

var file_machine_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x0c, 0x50, 0x69, 0x70,
	0x65, 0x74, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x76, 0x69, 0x61, 0x6c, 0x5f, 0x68, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x76, 0x69, 0x61, 0x6c, 0x48, 0x65, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x55, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x96,
	0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x76, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x75, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6c, 0x22, 0xc7, 0x01, 0x0a, 0x0f, 0x4d, 0x6f, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x58, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x22, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x59, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x7a, 0x5f,
	0x69, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5a, 0x49, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x79, 0x61, 0x77, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x59, 0x61, 0x77, 0x44, 0x65,
	0x67, 0x22, 0x98, 0x01, 0x0a, 0x0c, 0x46, 0x6c, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e,
	0x46, 0x6c, 0x75, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x6c, 0x75, 0x69, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6d,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x22, 0x3d, 0x0a, 0x0c,
	0x46, 0x6c, 0x75, 0x69, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x13,
	0x62, 0x6f, 0x77, 0x6c, 0x5f, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x6d, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x62, 0x6f, 0x77, 0x6c, 0x46,
	0x6c, 0x75, 0x69, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x6c, 0x22, 0xd4, 0x05, 0x0a, 0x0b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75,
	0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x4f,
	0x6e, 0x12, 0x3a, 0x0a, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x74, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x74, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0c, 0x70, 0x69, 0x70, 0x65, 0x74, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a,
	0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x10, 0x6d, 0x6f, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x6f, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0f, 0x6d, 0x6f,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3a, 0x0a,
	0x0d, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x46,
	0x6c, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x66, 0x6c, 0x75,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x66, 0x6c, 0x75,
	0x69, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x6c, 0x75, 0x69, 0x64,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x69, 0x6e, 0x73, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x69, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0b, 0x72, 0x69, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x61,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x64, 0x73, 0x6c, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x73,
	0x6c, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x22, 0x4b, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22,
	0x98, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x0c, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69,
	0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x69, 0x76, 0x65, 0x22, 0xd6,
	0x01, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x12, 0x5f, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x2e,
	0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x5e, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd0, 0x01, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x69, 0x73,
	0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d,
	0x73, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x15, 0x6d, 0x69, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4d, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x75,
	0x6c, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x13, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x12, 0x5c, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70, 0x6c, 0x61, 0x73, 0x68, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x6c, 0x61, 0x73, 0x68, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x70, 0x6c, 0x61, 0x73, 0x68, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x68,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x70, 0x6c, 0x61, 0x73, 0x68,
	0x74, 0x65, 0x78, 0x74, 0x48, 0x75, 0x65, 0x1a, 0x5e, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x61, 0x77, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x61,
	0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x61, 0x77, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x73,
	0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xb6, 0x02, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x70, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x70, 0x6f, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x55, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x75, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x22, 0x6c, 0x0a, 0x05, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x12, 0x35, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xa8, 0x05, 0x0a, 0x0b, 0x56, 0x69, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f,
	0x70, 0x5f, 0x75, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x70,
	0x55, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x75, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10,
	0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6c,
	0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x6f, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x66, 0x6f, 0x6f, 0x74,
	0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x6f,
	0x6f, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x66, 0x6f, 0x6f,
	0x74, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x6f, 0x6f, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x66,
	0x6f, 0x6f, 0x74, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x66, 0x6f, 0x6f, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x6f, 0x6f, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x75, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x55, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x75, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x76, 0x69, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x75, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x2e, 0x56, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x56, 0x69, 0x61,
	0x6c, 0x46, 0x6c, 0x75, 0x69, 0x64, 0x52, 0x09, 0x76, 0x69, 0x61, 0x6c, 0x46, 0x6c, 0x75, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x09, 0x56, 0x69, 0x61, 0x6c, 0x46, 0x6c, 0x75, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x49, 0x41, 0x4c, 0x5f, 0x46, 0x4c, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x56,
	0x49, 0x41, 0x4c, 0x5f, 0x46, 0x4c, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x59, 0x45, 0x5f, 0x57, 0x41,
	0x54, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x56,
	0x49, 0x41, 0x4c, 0x5f, 0x46, 0x4c, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x55, 0x4c, 0x53, 0x49,
	0x46, 0x49, 0x45, 0x52, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x49, 0x41, 0x4c, 0x5f, 0x46,
	0x4c, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x49, 0x52, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x49,
	0x41, 0x4c, 0x5f, 0x46, 0x4c, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x4e, 0x54,
	0x10, 0x04, 0x22, 0x96, 0x01, 0x0a, 0x17, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x69, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x05, 0x76, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x69,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x56, 0x69, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x69, 0x61, 0x6c,
	0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x69, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb4, 0x01, 0x0a, 0x15,
	0x56, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x2e, 0x56, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x1a,
	0x51, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x69, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xc8, 0x01, 0x0a, 0x1f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x69, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x52, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x51, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0xac, 0x04,
	0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x04, 0x12,
	0x0c, 0x0a, 0x08, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0x08, 0x12, 0x10, 0x0a,
	0x0c, 0x56, 0x49, 0x41, 0x4c, 0x5f, 0x31, 0x5f, 0x41, 0x42, 0x4f, 0x56, 0x45, 0x10, 0x0a, 0x12,
	0x12, 0x0a, 0x0e, 0x4d, 0x49, 0x4e, 0x5f, 0x56, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x42, 0x4f, 0x56,
	0x45, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x49, 0x41, 0x4c, 0x5f, 0x31, 0x5f, 0x49, 0x4e,
	0x53, 0x49, 0x44, 0x45, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x49, 0x4e, 0x5f, 0x56, 0x49,
	0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x56,
	0x49, 0x41, 0x4c, 0x5f, 0x32, 0x5f, 0x41, 0x42, 0x4f, 0x56, 0x45, 0x10, 0x14, 0x12, 0x11, 0x0a,
	0x0d, 0x56, 0x49, 0x41, 0x4c, 0x5f, 0x32, 0x5f, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x10, 0x19,
	0x12, 0x10, 0x0a, 0x0c, 0x56, 0x49, 0x41, 0x4c, 0x5f, 0x33, 0x5f, 0x41, 0x42, 0x4f, 0x56, 0x45,
	0x10, 0x1e, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x49, 0x41, 0x4c, 0x5f, 0x33, 0x5f, 0x49, 0x4e, 0x53,
	0x49, 0x44, 0x45, 0x10, 0x23, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x49, 0x41, 0x4c, 0x5f, 0x34, 0x5f,
	0x41, 0x42, 0x4f, 0x56, 0x45, 0x10, 0x28, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x49, 0x41, 0x4c, 0x5f,
	0x34, 0x5f, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x10, 0x2d, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x49,
	0x41, 0x4c, 0x5f, 0x35, 0x5f, 0x41, 0x42, 0x4f, 0x56, 0x45, 0x10, 0x32, 0x12, 0x11, 0x0a, 0x0d,
	0x56, 0x49, 0x41, 0x4c, 0x5f, 0x35, 0x5f, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x10, 0x37, 0x12,
	0x10, 0x0a, 0x0c, 0x56, 0x49, 0x41, 0x4c, 0x5f, 0x36, 0x5f, 0x41, 0x42, 0x4f, 0x56, 0x45, 0x10,
	0x3c, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x49, 0x41, 0x4c, 0x5f, 0x36, 0x5f, 0x49, 0x4e, 0x53, 0x49,
	0x44, 0x45, 0x10, 0x41, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x49, 0x41, 0x4c, 0x5f, 0x37, 0x5f, 0x41,
	0x42, 0x4f, 0x56, 0x45, 0x10, 0x46, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x58, 0x5f, 0x56, 0x49,
	0x41, 0x4c, 0x5f, 0x41, 0x42, 0x4f, 0x56, 0x45, 0x10, 0x46, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x49,
	0x41, 0x4c, 0x5f, 0x37, 0x5f, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x10, 0x4b, 0x12, 0x13, 0x0a,
	0x0f, 0x4d, 0x41, 0x58, 0x5f, 0x56, 0x49, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45,
	0x10, 0x4b, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x1e, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x49, 0x4e, 0x53, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x10, 0x50, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x49, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x55, 0x12, 0x12, 0x0a, 0x0e, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x5a, 0x12,
	0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4f, 0x56, 0x45,
	0x52, 0x10, 0x6e, 0x12, 0x20, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x4b,
	0x49, 0x4e, 0x45, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x96, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x44, 0x4c, 0x45, 0x5f, 0x4c, 0x4f,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x50, 0x1a, 0x02, 0x10, 0x01, 0x2a, 0x65, 0x0a, 0x0d,
	0x53, 0x6f, 0x6c, 0x65, 0x6e, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x12, 0x13, 0x0a,
	0x0f, 0x56, 0x41, 0x4c, 0x56, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x41, 0x4c, 0x56, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x49,
	0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x41, 0x4c, 0x56, 0x45, 0x5f, 0x57, 0x41, 0x54,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x41, 0x4c, 0x56, 0x45, 0x5f, 0x4d, 0x49,
	0x4c, 0x4b, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x41, 0x4c, 0x56, 0x45, 0x5f, 0x41, 0x49,
	0x52, 0x10, 0x04, 0x2a, 0x36, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x55,
	0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41,
	0x55, 0x54, 0x4f, 0x4e, 0x4f, 0x4d, 0x4f, 0x55, 0x53, 0x10, 0x02, 0x2a, 0x9b, 0x02, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x5f, 0x53, 0x54, 0x4f,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4c,
	0x45, 0x45, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x48, 0x55, 0x54,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x57,
	0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41,
	0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x14, 0x12, 0x13, 0x0a, 0x0f, 0x49,
	0x44, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x1e,
	0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x44, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x56, 0x49, 0x4e, 0x47, 0x10,
	0x1f, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x49, 0x4e, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x49, 0x50,
	0x45, 0x54, 0x54, 0x45, 0x10, 0x28, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53, 0x50, 0x45, 0x4e,
	0x53, 0x49, 0x4e, 0x47, 0x10, 0x32, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x37,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x3c,
	0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x41, 0x56, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x49,
	0x4b, 0x10, 0x46, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x41, 0x56, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x4b, 0x2a, 0x60, 0x0a, 0x0b, 0x52, 0x69, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x49, 0x4e, 0x53,
	0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x52, 0x49, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x49, 0x4e, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x49, 0x4e, 0x53, 0x45, 0x5f,
	0x45, 0x58, 0x50, 0x45, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x2a, 0x52, 0x0a, 0x09, 0x46,
	0x6c, 0x75, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4c, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x46, 0x4c, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x46, 0x4c, 0x55, 0x49, 0x44, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x46, 0x4c, 0x55, 0x49, 0x44, 0x5f, 0x4d, 0x49, 0x4c, 0x4b, 0x10, 0x03, 0x2a,
	0xaa, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43,
	0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x4e, 0x47,
	0x46, 0x4f, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x53,
	0x4c, 0x52, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x49, 0x4c, 0x4c, 0x10, 0x05, 0x2a, 0xde, 0x01, 0x0a,
	0x0e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x1d, 0x0a, 0x19, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f,
	0x52, 0x4d, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b,
	0x0a, 0x17, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52,
	0x4d, 0x5f, 0x59, 0x4f, 0x55, 0x54, 0x55, 0x42, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53,
	0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x54,
	0x49, 0x4b, 0x54, 0x4f, 0x4b, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x4f, 0x43, 0x49, 0x41,
	0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x47, 0x52, 0x41, 0x4d, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c,
	0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x42, 0x4f,
	0x4f, 0x4b, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x54, 0x57, 0x49, 0x54, 0x54, 0x45, 0x52, 0x10,
	0x05, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x54,
	0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x44, 0x44, 0x49, 0x54, 0x10, 0x06, 0x2a, 0xa2, 0x01,
	0x0a, 0x0e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1f, 0x0a, 0x1b, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01,
	0x12, 0x26, 0x0a, 0x22, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4f, 0x43, 0x49,
	0x41, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x10, 0x03, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x6b, 0x73, 0x74, 0x72, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x73, 0x6f, 0x6c,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_machine_proto_rawDescOnce sync.Once
	file_machine_proto_rawDescData = file_machine_proto_rawDesc
)

func file_machine_proto_rawDescGZIP() []byte {
	file_machine_proto_rawDescOnce.Do(func() {
		file_machine_proto_rawDescData = protoimpl.X.CompressGZIP(file_machine_proto_rawDescData)
	})
	return file_machine_proto_rawDescData
}

var file_machine_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_machine_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_machine_proto_goTypes = []interface{}{
	(Node)(0),                               // 0: machine.Node
	(SolenoidValve)(0),                      // 1: machine.SolenoidValve
	(Mode)(0),                               // 2: machine.Mode
	(Status)(0),                             // 3: machine.Status
	(RinseStatus)(0),                        // 4: machine.RinseStatus
	(FluidType)(0),                          // 5: machine.FluidType
	(ContentType)(0),                        // 6: machine.ContentType
	(SocialPlatform)(0),                     // 7: machine.SocialPlatform
	(EmailRecipient)(0),                     // 8: machine.EmailRecipient
	(VialProfile_VialFluid)(0),              // 9: machine.VialProfile.VialFluid
	(*PipetteState)(nil),                    // 10: machine.PipetteState
	(*CollectionRequest)(nil),               // 11: machine.CollectionRequest
	(*MovementDetails)(nil),                 // 12: machine.MovementDetails
	(*FluidRequest)(nil),                    // 13: machine.FluidRequest
	(*FluidDetails)(nil),                    // 14: machine.FluidDetails
	(*StateReport)(nil),                     // 15: machine.StateReport
	(*StateReportList)(nil),                 // 16: machine.StateReportList
	(*SessionStatus)(nil),                   // 17: machine.SessionStatus
	(*StreamStatus)(nil),                    // 18: machine.StreamStatus
	(*DispenseMetadataMap)(nil),             // 19: machine.DispenseMetadataMap
	(*DispenseMetadata)(nil),                // 20: machine.DispenseMetadata
	(*ContentTypeStatuses)(nil),             // 21: machine.ContentTypeStatuses
	(*ContentTypeStatus)(nil),               // 22: machine.ContentTypeStatus
	(*Post)(nil),                            // 23: machine.Post
	(*Email)(nil),                           // 24: machine.Email
	(*VialProfile)(nil),                     // 25: machine.VialProfile
	(*SystemVialConfiguration)(nil),         // 26: machine.SystemVialConfiguration
	(*VialProfileCollection)(nil),           // 27: machine.VialProfileCollection
	(*SystemVialConfigurationSnapshot)(nil), // 28: machine.SystemVialConfigurationSnapshot
	nil,                                     // 29: machine.DispenseMetadataMap.DispenseMetadataEntry
	nil,                                     // 30: machine.ContentTypeStatuses.ContentStatusesEntry
	nil,                                     // 31: machine.SystemVialConfiguration.VialsEntry
	nil,                                     // 32: machine.VialProfileCollection.ProfilesEntry
	nil,                                     // 33: machine.SystemVialConfigurationSnapshot.ProfilesEntry
}
var file_machine_proto_depIdxs = []int32{
	5,  // 0: machine.FluidRequest.fluidType:type_name -> machine.FluidType
	2,  // 1: machine.StateReport.mode:type_name -> machine.Mode
	3,  // 2: machine.StateReport.status:type_name -> machine.Status
	10, // 3: machine.StateReport.pipette_state:type_name -> machine.PipetteState
	11, // 4: machine.StateReport.collection_request:type_name -> machine.CollectionRequest
	12, // 5: machine.StateReport.movement_details:type_name -> machine.MovementDetails
	13, // 6: machine.StateReport.fluid_request:type_name -> machine.FluidRequest
	14, // 7: machine.StateReport.fluid_details:type_name -> machine.FluidDetails
	4,  // 8: machine.StateReport.rinse_status:type_name -> machine.RinseStatus
	15, // 9: machine.StateReportList.StateReports:type_name -> machine.StateReport
	29, // 10: machine.DispenseMetadataMap.dispense_metadata:type_name -> machine.DispenseMetadataMap.DispenseMetadataEntry
	30, // 11: machine.ContentTypeStatuses.content_statuses:type_name -> machine.ContentTypeStatuses.ContentStatusesEntry
	23, // 12: machine.ContentTypeStatus.posts:type_name -> machine.Post
	7,  // 13: machine.Post.platform:type_name -> machine.SocialPlatform
	8,  // 14: machine.Email.recipient:type_name -> machine.EmailRecipient
	9,  // 15: machine.VialProfile.vial_fluid:type_name -> machine.VialProfile.VialFluid
	31, // 16: machine.SystemVialConfiguration.vials:type_name -> machine.SystemVialConfiguration.VialsEntry
	32, // 17: machine.VialProfileCollection.profiles:type_name -> machine.VialProfileCollection.ProfilesEntry
	33, // 18: machine.SystemVialConfigurationSnapshot.profiles:type_name -> machine.SystemVialConfigurationSnapshot.ProfilesEntry
	20, // 19: machine.DispenseMetadataMap.DispenseMetadataEntry.value:type_name -> machine.DispenseMetadata
	22, // 20: machine.ContentTypeStatuses.ContentStatusesEntry.value:type_name -> machine.ContentTypeStatus
	25, // 21: machine.VialProfileCollection.ProfilesEntry.value:type_name -> machine.VialProfile
	25, // 22: machine.SystemVialConfigurationSnapshot.ProfilesEntry.value:type_name -> machine.VialProfile
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_machine_proto_init() }
func file_machine_proto_init() {
	if File_machine_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_machine_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipetteState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovementDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FluidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FluidDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateReportList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispenseMetadataMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispenseMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentTypeStatuses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentTypeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Post); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Email); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VialProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemVialConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VialProfileCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemVialConfigurationSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_machine_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_machine_proto_goTypes,
		DependencyIndexes: file_machine_proto_depIdxs,
		EnumInfos:         file_machine_proto_enumTypes,
		MessageInfos:      file_machine_proto_msgTypes,
	}.Build()
	File_machine_proto = out.File
	file_machine_proto_rawDesc = nil
	file_machine_proto_goTypes = nil
	file_machine_proto_depIdxs = nil
}
